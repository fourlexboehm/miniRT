#include <SDL.h>
#include <stdio.h>

#define PI 3.14
//Screen dimension constants
const int SCREEN_WIDTH = 1000;
const int SCREEN_HEIGHT = 1000;


typedef struct s_vector3
{
	double	x;
	double	y;
	double	z;
} t_vector3;

t_vector3	add_vector3(const t_vector3 v1, const t_vector3 v2)
{
	t_vector3	ret;

	ret.x = v1.x + v2.x;
	ret.y = v1.y + v2.y;
	ret.z = v1.z + v2.z;
	return (ret);
}
t_vector3	scale_vector3(const t_vector3 vec, const double scale)
{
	t_vector3	new_vec;

	new_vec.x = vec.x * scale;
	new_vec.y = vec.y * scale;
	new_vec.z = vec.z * scale;
	return (new_vec);
}
t_vector3	div_vector3(const t_vector3 vec, const double scale)
{
	t_vector3	new_vec;

	new_vec.x = vec.x / scale;
	new_vec.y = vec.y / scale;
	new_vec.z = vec.z / scale;
	return (new_vec);
}

void printf_vector3(char c, t_vector3* v1)
{
	printf("%c = %lfx, %lfy, %lfz\n", c, v1->x, v1->y, v1->z);
}
t_vector3	subtract_vector3(const t_vector3 v1, const t_vector3 v2)
{
	t_vector3	ret;

	ret.x = v1.x - v2.x;
	ret.y = v1.y - v2.y;
	ret.z = v1.z - v2.z;
	// printf_vector3('r', &ret);
	return (ret);
}


typedef struct s_pl
{
	t_vector3 C;

	double	ang;
	int		size;
} t_pl;
typedef	struct s_sp
{
	t_vector3	pos;
	double		diameter;
}	t_sp;
typedef struct s_ray
{
	t_vector3	O;
	t_vector3	D;
	int			t;
} t_ray;
typedef struct s_cam
{
	t_vector3	O;
	double		Dx;
	double		Dy;
	double		fov;
} t_cam;

void	init_vec3(t_vector3 *v, double x, double y, double z)
{
	v->x = x;
	v->y = y;
	v->z = z;
}

t_vector3 at(t_ray* ray, double t)
{
	return (add_vector3(ray->O, scale_vector3(ray->D, t)));
}

t_vector3 unit_vector3(t_vector3 v1)
{
	double mag = sqrt((v1.x * v1.x) + (v1.y * v1.y) + (v1.z * v1.z));
	v1.x /= mag;
	v1.y /= mag;
	v1.z /= mag;
	return (v1);
}

double get_distance_vector3(t_vector3* v1, t_vector3* v2)
{
	return(sqrt(pow(v2->x - v1->x, 2)
		+ pow(v2->y - v1->y, 2)
		+ pow(v2->z + v1->z, 2)));
}

double dot(t_vector3 *v1, t_vector3 *v2)
{
	return ((v1->x * v2->x) + (v1->y * v2->y) + (v1->z * v2->z));
}

double length_squared(t_vector3 const v3)
{
	return (v3.x * v3.x + v3.y * v3.y + v3.z * v3.z);
}

double length(t_vector3 const v3)
{
	return sqrt(length_squared(v3));
}

t_vector3 new_vector3(double x, double y, double z)
{
	t_vector3 rtn;
	rtn.x = x;
	rtn.y = y;
	rtn.z = z;
	return (rtn);
}

float collide_sphere_3D(t_ray* r, t_sp* s)
{
	t_vector3 oc = subtract_vector3(r->O, s->pos);
	float a = length_squared(r->D);
	float b = dot(&oc, &r->D);
	float c = length_squared(oc) - s->diameter * s->diameter;
	float discriminant = (b * b) - (a * c);
	if (discriminant < 0)
		return (-1);
	else
		return ((-b - sqrt(discriminant)) / a);
}

float collide_sphere_3D_reflect(t_ray* r, t_sp* s)
{
	t_vector3 oc = subtract_vector3(r->O, s->pos);
	float a = length_squared(r->D);
	float b = dot(&oc, &r->D);
	float c = length_squared(oc) - s->diameter * s->diameter;
	float discriminant = (b * b) - (a * c);

	double sqrtd = sqrt(discriminant);
	double root;

	root = (-b - sqrtd) / a;
	return (root);
}

t_vector3 reflect(t_vector3 v, t_vector3 n)
{
	// return subtract_vector3(scale_vector3(v, -2), n);
	// return (subtract_vector3(v, scale_vector3(n, 2 * dot(&v, &n))));
	// v = scale_vector3(v, -1);
	return subtract_vector3(v, scale_vector3(n, 2 * dot(&v, &n)));
}

t_vector3 ray_color(t_ray *r, SDL_Renderer* renderer, double movex, double movez)
{
	t_vector3 color;
	color.x = 1;
	color.y = 0;
	color.z = 0;

	t_sp sp;
	sp.pos.x = 0;
	sp.pos.y = 0;
	sp.pos.z = 3;
	sp.diameter = 1;

	t_sp sp2;
	sp2.pos.x = movex;
	sp2.pos.y = 1;
	sp2.pos.z = movez;
	sp2.diameter = 1;

	float t = collide_sphere_3D(r, &sp);
	float t2 = collide_sphere_3D(r, &sp2);

	if (t < 0 && t2 > 0)
		return (new_vector3(0, 0, 255));


	else if (t > 0)
	{
		t_ray ref;
		t_vector3 out_N;
		ref.O = at(r, t);

		// t_vector3 N = unit_vector3(subtract_vector3(ref.O, test));

		// N.y *= -1;
		// N.x *= -1;
		// N.z *= -1;

		out_N = div_vector3(subtract_vector3(ref.O, sp2.pos), sp2.diameter);
		// out_N = subtract_vector3(ref.O, sp2.pos);

		if (dot(&r->D, &out_N) < 0)
			out_N = scale_vector3(out_N, -1);

		ref.D = reflect(unit_vector3(r->D), out_N);

		t = collide_sphere_3D(&ref, &sp2);

		if (t > 0)
		{
			return (new_vector3(0, 255, 255));
		}
		return (new_vector3(0, 255, 0));
	}

	color.x = 1;
	color.y = 1;
	color.z = 1;

	t_vector3 colorb;
	colorb.x = 0.5;
	colorb.y = 0.7;
	colorb.z = 1;
	float n = (0.5 * (r->D.y + 1)) * 255 + 10;
	return (new_vector3(0, 0, 0));
}

void render_frame(SDL_Renderer* renderer, t_cam *cam)
{
	t_ray ray;
	ray.O.x = cam->O.x;
	ray.O.y = cam->O.y;
	ray.O.z = cam->O.z;
	ray.D.z = 0;
	ray.t = 1000;
	t_vector3 color;

	const auto aspect_ratio = SCREEN_WIDTH / SCREEN_HEIGHT;

	auto viewport_height = 2.0;
	double viewport_width = aspect_ratio * viewport_height;
	auto focal_length = 1.0;

	t_vector3 origin; init_vec3(&origin, 0, 0, 0);
	t_vector3 horizontal; init_vec3(&horizontal, viewport_width, 0, 0);
	t_vector3 vertical; init_vec3(&vertical, 0, viewport_height, 0);
	t_vector3 focal; init_vec3(&focal, 0, 0, focal_length);
	t_vector3 lower_left_corner = subtract_vector3(subtract_vector3(origin, scale_vector3(horizontal, 0.5)), subtract_vector3(scale_vector3(vertical, 0.5), focal));

	static double movex = 3;
	static double movez = 3;

	for (int y = SCREEN_HEIGHT; y >= 0; --y) {
		for (int x = 0; x < SCREEN_WIDTH; ++x) {
			double u = double(x) / SCREEN_WIDTH;
			double v = double(y) / SCREEN_HEIGHT;

			ray.D = subtract_vector3(add_vector3(add_vector3(lower_left_corner, scale_vector3(horizontal, u)), scale_vector3(vertical, v)), origin);
			color = ray_color(&ray, renderer, movex, movez);
			SDL_SetRenderDrawColor(renderer, color.x, color.y, color.z, 0);
			SDL_RenderDrawPoint(renderer, x, y);
		}
	}
	SDL_RenderPresent(renderer);
	static double angle = 0;
	movex = 3 * cos(angle);
	movez = 3 * sin(angle) + 3;
	angle -= 0.2;
	printf("movex = %lf\n", movex);
	printf("movez = %lf\n\n", movez);
}

int main(int argc, char* args[]) {
	SDL_Event event;
	SDL_Renderer* renderer;
	SDL_Window* window;

	SDL_Init(SDL_INIT_VIDEO);
	SDL_CreateWindowAndRenderer(1000, 1000, 0, &window, &renderer);
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
	SDL_RenderClear(renderer);


	t_cam cam;
	cam.O.x = 0;
	cam.O.y = 0;
	cam.O.z = -3;
	cam.Dx = 0;
	cam.Dy = 0;
	cam.fov = 20;

		
	while (1) 
	{
		render_frame(renderer, &cam);
		// SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
		// SDL_RenderClear(renderer);

		// SDL_RenderPresent(renderer);
		if (SDL_PollEvent(&event) && event.type == SDL_QUIT)
			break;
		// SDL_Delay(10);
	}
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();
	return 0;
}

